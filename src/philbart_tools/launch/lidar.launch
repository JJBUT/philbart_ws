<?xml version="1.0"?>
<!--
UT Austin/P66 Mobile Survey Collaboration
Platform Name: Philbart
Researcher: Jack Borer; Email: jackborer@utexas.edu
Research Advisor: Dr. Mitch Pryor; Email: mpryor@utexas.edu


***Summary:
This launch file is responsible for launching two nodes. Node 1 is a transformation publisher that broadcasts a static transform which connects the LIDAR to the robots reference frame. Node 2 launches the LIDAR device itself.

Node 1: "sick_to_baselink_tf"- Specifies the location of the LIDAR with respect to the robot. As is common within the ROS convention, the "base_link" frame specifies the origin of the platform. All locations measured with respect the robot are measured from this point, found roughly in the center of Philbart's bottom plate and about four inches above the ground (The distance between the ground and the bottom plate generated by the tires). 

*In layman's terms, the following paragraph can be summed up by saying that "the LIDAR is found on the robot forward and above the platforms assigned origin".

The "base_link" frame is oriented following the right-hand-rule convention such that the x-axis is oriented to the front of the robot, the y-axis is oriented toward the left (when looking forward), and the z-axis is pointed vertically. The transformation "arg" passed to the node, "0.40 0 0.30 0 0 0 1 base_link lidar_link", identifies the "base_link" as the parent frame and "lidar_link" (representing the origin of the LIDAR sensor) as the child frame. With this understanding we see that the numeric argument specifies that the "lidar_link" frame is offset 0.40m in the positive x-axis, 0.0m in the y-axis direction, and 0.30m in the positive z-axis from the platform's origin frame ("base_link"). Orientation is described with a quaternion, in this case the unit quaternion "0 0 0 1" tells us that both frames are oriented in the same way.

Node 2: "sick_tim_5xx": Launches the required driver and software platform to run the LIDAR and integrates the collected data stream into ROS. Our platform is equipped with a 2D Sick brand outdoor LIDAR ('light radar'). Measuring the time-of-flight of a beam of LASER (its an acronym so lets capitalize it!!!) light emitted from the sensor and then returned to the sensor allows the system to calculate a distance. Each beam of light is emitted and returned at a specific radial position along the scanning axis of the device. If the location of the laser is known with respect to the platform it is mounted on (i.e. we have the "lidar_link" to "base_link" transformation built by Node 1) then this measured distance and known angle can be used to infer the presence of absence of an obstacle in the environment. 

In other launch files and documentation the use of the LIDAR data will be discussed, particularly in the context of obstacle avoidance, mapping, and localization.


***Parameters:
Node 1: 
N/A

Node 2:
-"hostname": The IP address of the LIDAR, assigned using the Windows based SOPAS tool, static
-"cloud_topic": The ROS topic that the "point cloud" representation of the LIDAR scan is published to

***Tuning:
Node 1: 
-The transform from "base_link" to "lidar_link" will remain static unless the device is moved therefore no tuning is required

Node 2:

***Documentation:
Node 1: 
-static_transform_publisher:

Node 2:
-sensor_msgs/LaserScan message:


-->
<!--
     **********************************************
     Launch File for TIM 5xx scanner
     **********************************************
     Start and stop angle is given in [rad]

     Default min_angle is  -135 degree.
     Default max_angle is +135 degree.

     Check IP-address, if you scanner is not found after roslaunch.
-->

<!-- You can launch a TIM_5xx-scanner on a specific ip address (e.g. 192.68.0.71) using the following example call:

     roslaunch sick_scan sick_tim_5xx.launch hostname:=192.168.0.71

-->
<launch>
	<!--launch static tf from scanner to base_link-->
	<node pkg="tf2_ros" type="static_transform_publisher" name="sick_to_baselink_tf" args="0.40 0 0.30 0 0 0 1 base_link lidar_link"/>

    <arg name="hostname" default="192.168.131.2"/>
    <arg name="cloud_topic" default="cloud"/>
    <arg name="frame_id" default="lidar_link"/>
    <node name="sick_tim_5xx" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="screen">
        <!--<param name="robot_description" command="$(find xacro)/xacro.py '$(find sick_scan)/urdf/example.urdf.xacro'" />-->
        <!-- Default: min_angle = -135 degree, max_angle = 135 -->
        <!-- default values: -->
        <!--
          <param name="scanner_type" type="string" value="sick_tim_5xx" />
          <param name="min_ang" type="double" value="-2.35619449" />
          <param name="max_ang" type="double" value="2.35619449" />
          <param name="intensity" type="bool" value="True" />
          <param name="skip" type="int" value="0" />
          <param name="frame_id" type="str" value="laser" />
          <param name="time_offset" type="double" value="-0.001" />
          <param name="publish_datagram" type="bool" value="False" />
          <param name="subscribe_datagram" type="bool" value="false" />
          <param name="device_number" type="int" value="0" />
          <param name="range_min" type="double" value="0.05" />
        -->
        <param name="scanner_type" type="string" value="sick_tim_5xx"/>
        <!-- -135° -->
        <param name="min_ang" type="double" value="-1.5"/>
        <!-- 135° -->
        <param name="max_ang" type="double" value="1.5"/>
        <param name="use_binary_protocol" type="bool" value="false"/>
        <param name="range_max" type="double" value="25.0"/>
        <param name="range_min" type="double" value="0.2" />
        <param name="intensity" type="bool" value="False"/>
        <param name="hostname" type="string" value="$(arg hostname)"/>
        <param name="cloud_topic" type="string" value="$(arg cloud_topic)"/>
        <param name="frame_id" type="str" value="$(arg frame_id)"/>
        <param name="port" type="string" value="2111"/> <!--Changing this ti 2111 from 2112 solved Datagram error -->
        <param name="timelimit" type="int" value="5"/>
        <param name="sw_pll_only_publish" type="bool" value="true"/>
        <param name="publish_datagram" type="bool" value="True" />
         <param name="subscribe_datagram" type="bool" value="True" />
    </node>
</launch>

